  
plugins {
  id 'java'
}

repositories {
    mavenCentral()
	  jcenter()
}

dependencies {
    implementation("org.jgrapht:jgrapht-jdk1.5:0.7.3")
    implementation("org.graalvm.compiler:compiler:21.0.0")
    implementation(group: "commons-cli", name: "commons-cli", version: "1.4")
}


// Rovers domain
(1..20).each { number ->
  tasks.register("rovers-gs-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-d", "test_problems/rovers/domain.pddl", "-p", "test_problems/rovers/problems/pfile${number}.pddl", "-o", "test_problems/rovers/plans/pfile${number}_w_gs.plan"
  }
  
  tasks.register("rovers-gs-rand-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-h", "random", "-d", "test_problems/rovers/domain.pddl", "-p", "test_problems/rovers/problems/pfile${number}.pddl", "-o", "test_problems/rovers/plans/pfile${number}_w_gs.plan"
  }

  tasks.register("rovers-gs-rpg-asc-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-h", "rpgascending", "-d", "test_problems/rovers/domain.pddl", "-p", "test_problems/rovers/problems/pfile${number}.pddl", "-o", "test_problems/rovers/plans/pfile${number}_w_gs.plan"
  }

  tasks.register("rovers-gs-rpg-desc-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-h", "rpgdescending", "-d", "test_problems/rovers/domain.pddl", "-p", "test_problems/rovers/problems/pfile${number}.pddl", "-o", "test_problems/rovers/plans/pfile${number}_w_gs.plan"
  }

  tasks.register("rovers-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-d", "test_problems/rovers/domain.pddl", "-p", "test_problems/rovers/problems/pfile${number}.pddl", "-o", "test_problems/rovers/plans/pfile${number}.plan"
  }


}

// Driverlog domain
(1..20).each { number ->
  tasks.register("driverlog-gs-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-d", "test_problems/driverlog/domain.pddl", "-p", "test_problems/driverlog/problems/pfile${number}.pddl", "-o", "test_problems/driverlog/plans/pfile${number}_w_gs.plan"
  }

  tasks.register("driverlog-gs-rand-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-h", "random", "-d", "test_problems/driverlog/domain.pddl", "-p", "test_problems/driverlog/problems/pfile${number}.pddl", "-o", "test_problems/driverlog/plans/pfile${number}_w_gs.plan"
  }

  tasks.register("driverlog-gs-rpg-asc-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-h", "rpgascending", "-d", "test_problems/driverlog/domain.pddl", "-p", "test_problems/driverlog/problems/pfile${number}.pddl", "-o", "test_problems/driverlog/plans/pfile${number}_w_gs.plan"
  }

  tasks.register("driverlog-gs-rpg-desc-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-h", "rpgdescending", "-d", "test_problems/driverlog/domain.pddl", "-p", "test_problems/driverlog/problems/pfile${number}.pddl", "-o", "test_problems/driverlog/plans/pfile${number}_w_gs.plan"
  }

  tasks.register("driverlog-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-d", "test_problems/driverlog/domain.pddl", "-p", "test_problems/driverlog/problems/pfile${number}.pddl", "-o", "test_problems/driverlog/plans/pfile${number}.plan"
  }
}

// Satellite domain
(1..20).each { number ->
  tasks.register("satellite-gs-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-d", "test_problems/satellite/domain.pddl", "-p", "test_problems/satellite/problems/pfile${number}.pddl", "-o", "test_problems/satellite/plans/pfile${number}_w_gs.plan"
  }
  
  tasks.register("satellite-gs-rand-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-h", "random", "-d", "test_problems/satellite/domain.pddl", "-p", "test_problems/satellite/problems/pfile${number}.pddl", "-o", "test_problems/satellite/plans/pfile${number}_w_gs.plan"
  }

  tasks.register("satellite-gs-rpg-asc-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-h", "rpgascending", "-d", "test_problems/satellite/domain.pddl", "-p", "test_problems/satellite/problems/pfile${number}.pddl", "-o", "test_problems/satellite/plans/pfile${number}_w_gs.plan"
  }

  tasks.register("satellite-gs-rpg-desc-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-h", "rpgdescending", "-d", "test_problems/satellite/domain.pddl", "-p", "test_problems/satellite/problems/pfile${number}.pddl", "-o", "test_problems/satellite/plans/pfile${number}_w_gs.plan"
  }
  
  tasks.register("satellite-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-d", "test_problems/satellite/domain.pddl", "-p", "test_problems/satellite/problems/pfile${number}.pddl", "-o", "test_problems/satellite/plans/pfile${number}.plan"
  }
}

// Freecell domain
(1..20).each { number ->
  tasks.register("freecell-gs-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-d", "test_problems/freecell/domain.pddl", "-p", "test_problems/freecell/problems/pfile${number}.pddl", "-o", "test_problems/freecell/plans/pfile${number}_w_gs.plan"
  }

  tasks.register("freecell-gs-rand-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-h", "random", "-d", "test_problems/freecell/domain.pddl", "-p", "test_problems/freecell/problems/pfile${number}.pddl", "-o", "test_problems/freecell/plans/pfile${number}_w_gs.plan"
  }

  tasks.register("freecell-gs-rpg-asc-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-h", "rpgascending", "-d", "test_problems/freecell/domain.pddl", "-p", "test_problems/freecell/problems/pfile${number}.pddl", "-o", "test_problems/freecell/plans/pfile${number}_w_gs.plan"
  }

  tasks.register("freecell-gs-rpg-desc-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-g", "-h", "rpgdescending", "-d", "test_problems/freecell/domain.pddl", "-p", "test_problems/freecell/problems/pfile${number}.pddl", "-o", "test_problems/freecell/plans/pfile${number}_w_gs.plan"
  }
  
  tasks.register("freecell-${number}", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'javaff.JavaFF'
    args "-d", "test_problems/freecell/domain.pddl", "-p", "test_problems/freecell/problems/pfile${number}.pddl", "-o", "test_problems/freecell/plans/pfile${number}.plan"
  }
}
// Additional problems
(2..13).each { number1 -> 
  (1..5).each { number2 ->
    tasks.register("freecell-gs-${number1}-${number2}", JavaExec) {
      classpath = sourceSets.main.runtimeClasspath
      main = 'javaff.JavaFF'
      args "-g", "-d", "test_problems/freecell/domain.pddl", "-p", "test_problems/freecell/additional_problems/probfreecell-${number1}-${number2}.pddl", "-o", "test_problems/freecell/plans/probfreecell-${number1}-${number2}_w_gs.plan"
    }

    tasks.register("freecell-gs-rand-${number1}-${number2}", JavaExec) {
      classpath = sourceSets.main.runtimeClasspath
      main = 'javaff.JavaFF'
      args "-g", "-h", "random", "-d", "test_problems/freecell/domain.pddl", "-p", "test_problems/freecell/additional_problems/probfreecell-${number1}-${number2}.pddl", "-o", "test_problems/freecell/plans/probfreecell-${number1}-${number2}_w_gs.plan"
    }

    tasks.register("freecell-gs-rpg-asc-${number1}-${number2}", JavaExec) {
      classpath = sourceSets.main.runtimeClasspath
      main = 'javaff.JavaFF'
      args "-g", "-h", "rpgascending", "-d", "test_problems/freecell/domain.pddl", "-p", "test_problems/freecell/additional_problems/probfreecell-${number1}-${number2}.pddl", "-o", "test_problems/freecell/plans/probfreecell-${number1}-${number2}_w_gs.plan"
    }

    tasks.register("freecell-gs-rpg-desc-${number1}-${number2}", JavaExec) {
      classpath = sourceSets.main.runtimeClasspath
      main = 'javaff.JavaFF'
      args "-g", "-h", "rpgdescending", "-d", "test_problems/freecell/domain.pddl", "-p", "test_problems/freecell/additional_problems/probfreecell-${number1}-${number2}.pddl", "-o", "test_problems/freecell/plans/probfreecell-${number1}-${number2}_w_gs.plan"
    }

    tasks.register("freecell-${number1}-${number2}", JavaExec) {
      classpath = sourceSets.main.runtimeClasspath
      main = 'javaff.JavaFF'
      args "-d", "test_problems/freecell/domain.pddl", "-p", "test_problems/freecell/additional_problems/probfreecell-${number1}-${number2}.pddl", "-o", "test_problems/freecell/plans/probfreecell-${number1}-${number2}.plan"
    }
  }
}

// Elevators domain
(1..30).each { number1 ->
  (0..4).each {number2 -> 
    tasks.register("elevators-gs-${number1}-${number2}", JavaExec) {
      classpath = sourceSets.main.runtimeClasspath
      main = 'javaff.JavaFF'
      args "-g", "-d", "test_problems/elevators/domain.pddl", "-p", "test_problems/elevators/problems/s${number1}-${number2}.pddl", "-o", "test_problems/elevators/plans/s${number1}-${number2}_w_gs.plan"
    }

    tasks.register("elevators-gs-rand-${number1}-${number2}", JavaExec) {
      classpath = sourceSets.main.runtimeClasspath
      main = 'javaff.JavaFF'
      args "-g", "-h", "random", "-d", "test_problems/elevators/domain.pddl", "-p", "test_problems/elevators/problems/s${number1}-${number2}.pddl", "-o", "test_problems/elevators/plans/s${number1}-${number2}_w_gs.plan"
    }

    tasks.register("elevators-gs-rpg-asc-${number1}-${number2}", JavaExec) {
      classpath = sourceSets.main.runtimeClasspath
      main = 'javaff.JavaFF'
      args "-g", "-h", "rpgascending", "-d", "test_problems/elevators/domain.pddl", "-p", "test_problems/elevators/problems/s${number1}-${number2}.pddl", "-o", "test_problems/elevators/plans/s${number1}-${number2}_w_gs.plan"
    }

    tasks.register("elevators-gs-rpg-desc-${number1}-${number2}", JavaExec) {
      classpath = sourceSets.main.runtimeClasspath
      main = 'javaff.JavaFF'
      args "-g", "-h", "rpgdescending", "-d", "test_problems/elevators/domain.pddl", "-p", "test_problems/elevators/problems/s${number1}-${number2}.pddl", "-o", "test_problems/elevators/plans/s${number1}-${number2}_w_gs.plan"
    }

    tasks.register("elevators-${number1}-${number2}", JavaExec) {
      classpath = sourceSets.main.runtimeClasspath
      main = 'javaff.JavaFF'
      args "-d", "test_problems/elevators/domain.pddl", "-p", "test_problems/elevators/problems/s${number1}-${number2}.pddl", "-o", "test_problems/elevators/plans/s${number1}-${number2}.plan"
    }
  }
}